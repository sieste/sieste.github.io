<!doctype html>
<html lang=en>
<head>
<meta charset=utf-8>
<title>Stefan Siegert</title>
<link rel=stylesheet href=/style.css>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</head>
<body>
<h1><a href=/ title="Stefan Siegert">Stefan Siegert</a></h1>


<h2>Simulating alcohol intoxication with a pharmacokinetic model</h2>

<!--begin.rcode init, echo=FALSE
  prefix = paste('fig/', knitr::current_input(dir=FALSE), '-', sep='')
  knitr::opts_chunk$set(fig.width=7, fig.height=7, fig.path=prefix)
end.rcode-->


<!--begin.rcode, include=FALSE
library(tidyverse)
library(GGally)
library(deSolve)
end.rcode-->
<!--begin.rcode, eval=FALSE
library(tidyverse)
library(GGally) # for ggpairs
library(deSolve)
end.rcode-->



<!--begin.rcode fig1, fig.width=6, fig.height=4

# model parameters
parameters = c(
  k_g = 1.0,      # per hour, GI tract elimination rate (not into blood)
  k_a = 2.0,      # per hour, absorption rate from GI tract into blood
  k_e = 3.0,      # per hour, elimination rate from blood by liver
  duration = 0.5, # hours of dosing
  input = 28      # grams of alcohol per hour of dosing
)

# initial state
state = c(dose = 0, gi = 0, blood = 0)

# this is the 2-compartment differential equations model function, implemented
# in the correct format to be used with deSolve
model = function(t, state, parameters) {
  # state: (dose, gi, blood)
  # parameters: (k_g, k_a, k_e, duration, input)
  with(as.list(c(state, parameters)),{
    dose = ifelse(t <= duration, input, 0)  # dosing
    dgi = -k_a * gi - k_g * gi + dose   # GI tract equation
    dblood = k_a * gi - k_e * blood     # blood equation
    return(list(c(dose, dgi, dblood)))  # derivatives
  }) 
}

# simulate model, immediately convert output to long data frame
times = seq(0, 12, by = 0.05)
out = ode(y = state, times = times, func = model, parms = parameters) %>% 
      as.data.frame %>%
      pivot_longer(c(gi, blood), 
                   names_to='compartment', 
                   values_to='concentration')

ggplot(out) + 
  geom_line(aes(x=time, y=concentration, colour=compartment)) + 
  xlim(0,5)

end.rcode-->

<p>TODO Explain plot: gi tract concentration initially increases according to
the dosing function, here 28 grams per hour for half an hour. but the full 14
grams are never reached because of the elimination (k_g) and the transfer to
the blood (k_a). the blood alcohol increases slowly because of the finite
transfer rate from gi tract into blood stream. after the dosing stops, gi tract
concentration starts to decrease, but blood concentration still increases for a
bit before it slowly drops due to elimination, mostly via the liver but also
via lungs, skin, and cell metabolism (k_e). 

<h2>Model calibration</h2>

<p>Find parameter settings that are consistent with observations of the system.

https://en.wikipedia.org/wiki/Short-term_effects_of_alcohol_consumption
BAC 0.00-0.03 no noticable effects
BAC 0.03-0.06 mild euphoria, relaxation 
BAC 0.06-0.10 disinhibition, extraversion, impaired reasoning
BAC 0.10-0.20 boisterousness, spins, slurred speech, vomiting
BAC 0.20-     better stay away

https://en.wikipedia.org/wiki/Blood_volume
our simulation is amount of alcohol in blood, so need to convert. BAC of 1
means there is 1g of alcohol per 100ml of blood, or 10g/l. men have about
0.075l of blood per kg body weight, women 0.065l/kg. 

we want to calibrate our model. that means finding those parameters settings
that produce "realistic" simulations. assume we only have rather vague
calibration data as follows. a 75kg male reports that he usually feels a
slight effect after drinking one pint of beer in around 30 minutes, and this
effect becomes unnoticable after between 1 and 3 hours. that means that the
maximum blood alcohol after ingesting 14g of alcohol is between
0.03*10g/l*75kg*0.075l/kg=1.7g and 0.06*10g/l*75kg*0.075l/kg=3.4g, and blood
alcohol amount drops to below 1.7g at some point between 1 and 3 hours.




<h2>Choosing the parameter range</h2>

<!--begin.rcode
# helper function that takes model parameters and returns a 12-hour simulation
# (matrix with 4 columns: time, dose, gi, blood)
sim = function(parms) {
  stopifnot(length(parms) == 5)
  names(parms) = c('k_g', 'k_a', 'k_e', 'duration', 'input')
  out = ode(y = state, times = times, func = model, parms = parms)
  return(as.matrix(out))
}
head(sim(parameters))
end.rcode-->


<!--begin.rcode
# 2^k experimental design for rate parameters (ie all combinations of factor 
# levels)
design0 = 
  crossing(k_g = c(0, 2), 
           k_a = c(1, 3),
           k_e = c(2, 4)) %>%
  mutate(duration = 0.5, input = 28)
design0
end.rcode-->

<!--begin.rcode
# for each parameter setting, calculate maximum blood concentration, and time
# to drop back below 4.5
max_blood = numeric(nrow(design0))
up_time = numeric(nrow(design0))
for (ii in 1:nrow(design0)) {
  out_ = sim(design0[ii, ])
  time_ = out_[, 'time']
  blood_ = out_[, 'blood']
  max_blood[ii] = max(blood_)
  i_dur_ = tail(which(blood_ > 1.7), 1) 
  up_time[ii] = ifelse(length(i_dur_) == 0, NA, time_[i_dur_])
}
design0 = design0 %>%
  mutate(max_blood = max_blood, up_time = up_time)
end.rcode-->


<!--begin.rcode
# fit linear models  
lm(max_blood ~ k_g * k_a * k_e, data=design0)
lm(up_time ~ k_g * k_a * k_e, data=design0)
end.rcode-->

Main effects of k_g, k_a, k_e on max_blood are -1, 1.5, -0.5; notable
interactions are k_g:k_e = 0.17 and k_a:k_e = -0.15, the others are
negligible.

So a one unit increase in k_g/k_a/k_e changes maximum blood amount by about
-1/+1.5/-0.5 grams. 

interactions are relatively small, but we should notice the negative
interactions between k_a and k_e, making the joint effect smaller than
expected by adding the primary effects.

since our calibration target range for maximum blood amount is 1.7g to 3.4g,
we should vary k_g/k_a/k_e by +/- 3/2/6. 

For maximum duration we have primary effects -0.9/-0.5/-0.6 and small
positive interactions. A one unit change in k_g/k_a/k_e changes max duration
by at least 30 minutes. Our target range is 1-3 hours, so we should vary each
parameters by +/-3 to cover that range. In summary, we should vary the
following uncertainty distributions seem reasonable: k_g ~ U(0, 6), k_a ~
U(0,6) k_e ~ U(0, 6)

<!--begin.rcode
set.seed(123)
n = 1000
par_mat = cbind(k_a = runif(n, 0, 6),
                k_g = runif(n, 0, 6),
                k_e = runif(n, 0, 6),
                duration = 0.5,
                input = 28)

# for each parameter setting, store maximum blood concentration, and time to
# drop back below 4.5
max_blood = numeric(n)
up_time = numeric(n)
for (ii in 1:n) {
  out_ = sim(par_mat[ii, ])
  time_ = out_[, 'time']
  blood_ = out_[, 'blood']
  max_blood[ii] = max(blood_)
  i_dur_ = tail(which(blood_ > 1.7), 1) 
  up_time[ii] = ifelse(length(i_dur_) == 0, 0, time_[i_dur_])
}
end.rcode-->


<h2>History Matching</h2>

<!--begin.rcode
# history matching result
hm_res = as_tibble(par_mat) %>%
  mutate(max_blood = max_blood, up_time = up_time) %>%
  mutate(nroy = max_blood > 1.7 & max_blood < 3.4 & up_time > 1 & up_time < 3)
ggpairs(hm_res, columns = c('k_a', 'k_g', 'k_e'), aes(colour=nroy))
end.rcode-->

<!--begin.rcode
# simulate and plot blood alcohol for the nroy parameters
par_mat_nroy = hm_res %>% 
  filter(nroy) %>% 
  select(k_a, k_g, k_e, duration, input) %>% 
  as.matrix

# for each of the nroy parameters plot the blood alcohol concentration curve
res = NULL
for (ii in 1:nrow(par_mat_nroy)) {
  out_ = sim(par_mat_nroy[ii, ])
  res_ii = tibble(sample = ii, time = out_[, 'time'], blood = out_[, 'blood'])
  if (ii == 1) {
    res = res_ii
  } else {
    res = bind_rows(res, res_ii)
  }
}

ggplot(res) + 
  geom_line(aes(x=time, y=blood, group=sample), alpha=.2) +
  geom_hline(yintercept=c(1.7, 3.4), lty=2) +
  geom_vline(xintercept=c(1, 3), lty=2) 
end.rcode-->


<p><strong>History matching</strong> on (vague) empirical data: MORE HERE

<p>The same amount of alcohol can have different effects on different people. The subjective feeling of intoxication due to a certain amount of alcohol depends mostly on the person's weight, and to some extent on their sex.

<p>Blood alcohol concentration (BAC) is calculated by taking the amount of alcohol in the blood (measured in grams, as in our simulation), and dividing this by the volume of distribution, which is basically the body's water content, calculated as \(0.6 * body\ weight\) for males and \(0.55 * body\ weight\) for females. So a 75kg male with 10g of alcohol in their blood has a BAC of \(0.01 / (75 * 0.6) = 0.00022\) that is, 0.22 permille.

<p>A slight mood elevation, slightly relaxed feeling and mild impairment of coordination (feeling tipsy) is usually reported at between 0.1 and 0.3 permille BAC. At 0.4 to 0.6 permille lowered inhibition and impaired memory set in, 0.7 to 0.9 people get euphoria and slurred speech, and after about 1 permille (45g alcohol in blood for our 75kg guy) the chance of marriage proposals and pirate chants increases drastically.

<p>So if you know that drinking one beer within half an hour makes you slightly tipsy at most, but never drunk, you know that you are at between 0.1 and 0.3 permille BAC which, depending on your weight and sex, translates into a certain maximum alcohol amount in your blood. For the 75kg dude this would be between 4.5 and 13.5 grams. 



<h2>Applying the model to different conditions</h2>

<!--begin.rcode
# for each of the nroy parameters plot the blood alcohol concentration curve
# under the new scenario
res2 = NULL
for (ii in 1:nrow(par_mat_nroy)) {
  parms = par_mat_nroy[ii, ]
  parms[4:5] = c(2, 14) # 14g/hr (1 pint per hour) in 2 hours
  out_ = sim(parms) 
  res_ii = tibble(sample = ii, time = out_[, 'time'], blood = out_[, 'blood'])
  if (ii == 1) {
    res2 = res_ii
  } else {
    res2 = bind_rows(res2, res_ii)
  }
}

ggplot(res2) + 
  geom_line(aes(x=time, y=blood, group=sample), alpha=.2) + 
  geom_hline(yintercept=c(1.7, 3.4), lty=2)

# probability of being more than "tipsy" after 2 beers in 2 hours
res2 %>% 
  group_by(sample) %>%
  summarise(max = max(blood)) %>%
  ggplot() + 
    stat_ecdf(aes(x=max)) +
    geom_vline(xintercept=3.4, lty=2)
# probability of being drunk is about 35% after 2 beer

res2 %>% 
  group_by(sample) %>%
  summarise(max=max(blood), .groups='drop') %>%
  summarise(mean(max > 3.4))
end.rcode-->




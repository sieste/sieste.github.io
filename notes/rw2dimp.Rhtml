<!doctype html>
<html lang=en>
<head>
<meta charset=utf-8>
<title>Stefan Siegert</title>
<link rel=stylesheet href=/style.css>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</head>
<body>
<h1><a href=/ title="Stefan Siegert">Stefan Siegert</a></h1>


<h2>Imputing missing data on a 2d grid</h2>

<!--begin.rcode init, echo=FALSE
  prefix = paste('fig/', knitr::current_input(dir=FALSE), '-', sep='')
  knitr::opts_chunk$set(fig.width=10, fig.height=7, fig.path=prefix)
end.rcode-->

<!--begin.rcode, eval=FALSE
library(tidyverse)
library(Matrix)
end.rcode-->
<!--begin.rcode, include=FALSE
library(tidyverse)
library(Matrix)
set.seed(123)
end.rcode-->


<p>Assume we have data on a 2d grid, but some values are missing, something like this:

<!--begin.rcode 

# ground truth
x = rbind(
 c(10, 11, 12, 13, 14),
 c(12, 13, 14, 15, 16),
 c(14, 15, 16, 17, 18),
 c(16, 17, 18, 19, 20),
 c(18, 19, 20, 21, 22),
 c(20, 21, 22, 23, 24))

# observation, with data missing
y = rbind(
 c(10, NA, NA, 13, 14),
 c(12, NA, NA, 15, NA),
 c(14, NA, NA, 17, 18),
 c(16, 17, 18, 19, 20),
 c(18, 19, 20, NA, NA),
 c(NA, 21, 22, 23, 24))

end.rcode-->

Here is a simple way to fill in the missing values. Our statistical model assumes that the underlying "truth" is a realisation of a 2-d random walk (RW2D), i.e. the value at a location is equal to the average of its nearest neighbors plus iid mean-zero Normal noise:

\[X_{i,j} = \frac14 (X_{i-1,j} +  X_{i+1,j} + X_{i,j-1} + X_{i,j+1}) + \epsilon_{i,j}\]

where \(\epsilon_{i,j} \sim N(0,\tau^{-1})\) is independent Gaussian noise with variance \(\tau^{-1}\). 

<p>Then we model the observed data as truth plus independent noise.

\[Y_{i,j} = X_{i,j} + \eta_{i,j}\]

where \(\eta_{i,j}\) is iid zero-mean Normal with precision \(\kappa\). We'll also assume that \(\kappa\) much greater than \(\tau\), that is, the observation error is much smaller than the internal variability of the RW2D.

<p>It can be <a href=rw2d.html>shown</a> that the vectorised version of \(X\) (obtained by stacking the columns of the matrix into one long vector) is a multivariate Normal random vector defined by

\[e = (1_m \otimes D_n + D_m \otimes 1_m) x\]

where \(e\) is a vector of iid Normals with mean zero and precision \(\tau\), \(1_m\) and \(1_n\) are identity matrices of dimension \(n\) and \(m\), and \(D_n\) and \(D_m\) are tridiagonal \(n\times n\) and \(m \times m\) matrices of the form

\[\frac14 \left(\begin{matrix}
1  & -1 &        &\\
-1 &  2 &     -1 &\\
   & \ddots & \ddots & \ddots\\
   &        & -1     & 2      & -1\\
   &        &        & -1     & 1\\
\end{matrix}\right)\]

Hence \(x\) is multivariate Normal with mean zero and precision matrix

\[Q_x = \tau R_x = \tau (1_m \otimes D_n + D_m \otimes 1_m)^T (1_m \otimes D_n + D_m \otimes 1_m)\]

<p>The matrix \(R_x\) is often called the structure matrix of the precision matrix.

<p>The observed data \(y\), given the vector of true values \(x\) is then given by

\[y = Ax + \eta\]

where \(\eta\) is a vector of iid Normals with zero mean and precision \(\kappa \gg \tau\) and the matrix \(A\) is the incidence matrix that extracts a subset of values from the \(x\) vector. For example, if \(x\) has length 4 and only the first and the third elements of \(x\) are observed in \(y\), the matrix \(A\) is equal to 

\[\left(\begin{matrix}1 & 0 & 0 & 0\\0&0&1&0\end{matrix}\right)\]

<p>So now we have a Bayesian hierarchical model with the latent level

\[x \sim N(0,Q_x^{-1})\]

and data level

\[y|x \sim N(Ax, Q_y^{-1})\]

where \(Q_y\) is a diagonal matrix.

<p>A bit of matrix algebra shows that the conditional distribution of \(x\) given \(y\) is also multivariate Normal with expectation

\[ E[x|y] = (\theta R_x + A^T A)^{-1} A^T y\]

where \(\theta = \tau / \kappa\) is the ratio of precisions. Since we assumed that \(\kappa\) is large compared to \(\tau\), we set \(\theta = 10^{-6}\) or a similarly small value.

<p>Below is an R implementation of the method:

<!--begin.rcode 

nx = ncol(y)
ny = nrow(y)
y_vec = c(y)
Dx = 0.25 * bandSparse(n=nx, k=0:1, sym=TRUE,
                       diag=list(rep(c(1,2,1), c(1, nx-2, 1)), 
                                 rep(-1, nx-1)))
Dy = 0.25 * bandSparse(n=ny, k=0:1, sym=TRUE,
                       diag=list(rep(c(1,2,1), c(1, ny-2, 1)), 
                                 rep(-1, ny-1)))
Ix = Diagonal(nx)
Iy = Diagonal(ny)
DD = kronecker(Ix, Dy) + kronecker(Dx, Iy)
RR = crossprod(DD)
theta = 1e-6

# calculate incidence matrix A 
colsA = which(!is.na(y_vec))
rowsA = seq_along(colsA)
valsA = rep(1, length(colsA))
AA = sparseMatrix(i=rowsA, j=colsA, x=valsA)
AtA = crossprod(AA)
# now `AA %*% x` returns the vector of non-missing values

# calculate conditional expectation of missing values
x_vec_inferred = solve(theta * RR + AtA, AtA %*% y_vec)

# retain original x values and replace missing values 
# by their conditional expectation
y_vec_imputed = y_vec
i_na = which(is.na(y_vec))
y_vec_imputed[ i_na ] = x_vec_inferred[ i_na ]

# convert back into ny-nx matrix
y_imputed = matrix(y_vec_imputed, ny, nx)

end.rcode-->


<!--begin.rcode, echo=FALSE

# print results
cat("true values\n")
print(x)
cat("\n")
cat("observed values\n")
print(y)
cat("\n")
cat("imputed values")
print(round(y_imputed, 2))
cat("\n")

end.rcode-->

<!--begin.rcode results, fig.height=3, fig.width=7, out.width="100%", dpi=150

# plot results
crossing(jj=1:nx, ii=1:ny) %>%
  mutate(`A: true` = c(x),
         `B: observed` = c(y),
         `C: imputed` = c(y_imputed)) %>%
  pivot_longer(-c(jj,ii), names_to='type', values_to='value') %>%
  ggplot() + 
    geom_raster(aes(x=jj, y=ii, fill=value)) + 
    facet_wrap(~type) + 
    scale_y_reverse() + labs(x=NULL, y=NULL)

end.rcode-->

<p>We might look at the imputation error to see how well it worked:

<!--begin.rcode 
# mean squared imputation error
imp_err = mean((x[i_na] - y_imputed[i_na])^2)

# total variance of (non-missing) data
tot_var = var(c(y), na.rm=TRUE)

# imputation error vs total variance ratio
imp_err / tot_var
end.rcode-->

<p>So the error variance is less than 0.3% of the total variance, which I think should be acceptable in most use cases.

<p>More advanced imputation models can include latent processes on multiple scales, and different degrees of spatial correlation in different parts of the domain. For small domains like the one used here, the simple model works well, and not much would be gained by fancier techniques. Of course the performance of the method depends on the data.

<p>The parameter \(\theta\) could be treated as a tunable parameter. But again, the imputation error is so small here that a sensitivity analysis doesn't make much sense.



